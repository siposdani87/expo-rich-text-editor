declare const HTML = "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>editor</title>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"user-scalable=1.0,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0\">\n    <style>\n        * {\n            outline: 0px solid transparent;\n            -webkit-tap-highlight-color: #000000;\n            -webkit-touch-callout: none;\n            -webkit-overflow-scrolling: touch;\n        }\n\n        html,\n        body {\n            flex: 1;\n            outline: 0;\n            padding: 0;\n            margin: 0;\n            font-family: Arial, sans-serif;\n            font-size: 16px;\n            color: #000000;\n        }\n\n        p {\n            margin: 0 0 16px 0;\n        }\n\n        li {\n            margin-bottom: 16px;\n        }\n\n        .editors,\n        .content-editor,\n        .textarea-editor {\n            outline: 0;\n            padding: 0;\n            margin: 0;\n            width: 100%;\n            border: none;\n            background: transparent;\n            font-family: inherit;\n            font-size: inherit;\n            color: inherit;\n        }\n\n        .content-editor[contenteditable] {\n            -webkit-user-select: text;\n            user-select: text;\n        }\n\n        .textarea-editor {\n            resize: none;\n            overflow: auto;\n        }\n\n        .disabled-select {\n            -webkit-user-select: none !important;\n            user-select: none !important;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"editors\"></div>\n    <script>\n        (function () {\n            var isCode = true;\n            var contentEditor = null;\n            var textareaEditor = null;\n            var isWebView = window.ReactNativeWebView && typeof window.ReactNativeWebView.postMessage === 'function';\n            var height = 0;\n            var timeoutHtml = null;\n            var selection = document.getSelection();\n            var linkColor = 'blue';\n\n            function debounceHtml(func, wait) {\n                clearTimeout(timeoutHtml);\n                timeoutHtml = setTimeout(function () {\n                    timeoutHtml = null;\n                    func();\n                }, wait);\n            };\n\n            function exec(command, value) {\n                return document.execCommand(command, false, value);\n            };\n\n            function sendAction(type, data) {\n                if (isWebView) {\n                    var message = JSON.stringify({ type, data });\n                    window.ReactNativeWebView.postMessage(message);\n                }\n            };\n\n            function log(message) {\n                if (isWebView) {\n                    sendAction('log', message);\n                } else {\n                    console.log(message);\n                }\n            };\n\n            var Actions = {\n                changeHtml: function () {\n                    debounceHtml(function () {\n                        sendAction('changeHtml', contentEditor.innerHTML);\n                    }, 1000);\n                },\n                changeHeight: function () {\n                    setTimeout(function () {\n                        var newHeight = 0;\n                        if (isCode) {\n                            textareaEditor.style.height = '';\n                            textareaEditor.style.height = textareaEditor.scrollHeight + 'px';\n                            newHeight = textareaEditor.scrollHeight;\n                        } else {\n                            newHeight = Math.ceil(contentEditor.getBoundingClientRect().height);\n                        }\n                        log(newHeight);\n                        if (height !== newHeight) {\n                            height = newHeight;\n                            sendAction('changeHeight', newHeight);\n                        }\n                    }, 500);\n                },\n                onClickLink: function (href) {\n                    sendAction('onClickLink', href);\n                },\n                focus: function () {\n                    sendAction('onFocus');\n                },\n                blur: function () {\n                    sendAction('onBlur');\n                },\n                setHtml: function (newHtml) {\n                    if (contentEditor.innerHTML !== newHtml) {\n                        var savedSelection = [selection.focusNode, selection.focusOffset];\n                        contentEditor.innerHTML = newHtml;\n                        textareaEditor.value = newHtml;\n                        selection.collapse(savedSelection[0], savedSelection[1]);\n                        Actions.changeHeight();\n                        Actions.setLinkColor(linkColor);\n                    }\n                },\n                setColor: function (color) {\n                    document.body.style.color = color;\n                    Actions.changeHeight();\n                },\n                setFontFamily: function (fontFamily) {\n                    var [capitalizeFontFamily, weightWithText, fontStyle] = fontFamily.split('_', 3);\n                    var familyNames = capitalizeFontFamily.split(/(?=[A-Z])/);\n                    var weight = weightWithText ? weightWithText.match(/[0-9]+/g)[0] : 400;\n                    var styleLink = document.getElementById('google-font');\n                    if (!styleLink) {\n                        styleLink = document.createElement('link');\n                        styleLink.id = 'google-font';\n                        styleLink.rel = 'stylesheet';\n                        document.head.appendChild(styleLink);\n                    }\n                    styleLink.href = 'https://fonts.googleapis.com/css?family=' + familyNames.join('+') + ':' + weight + '&subset=latin-ext&display=swap';\n                    document.body.style.fontFamily = familyNames.join(' ');\n                    document.body.style.fontWeight = weight;\n                    document.body.style.fontStyle = fontStyle ? fontStyle.toLowerCase() : 'normal';\n                    Actions.changeHeight();\n                },\n                setFontSize: function (fontSize) {\n                    document.body.style.fontSize = (fontSize || 16) + 'px';\n                    Actions.changeHeight();\n                },\n                setLinkColor: function (opt_color) {\n                    if (opt_color) {\n                        linkColor = opt_color;\n                    }\n                    var onClick = function (e) {\n                        e.preventDefault();\n                        var href = e.currentTarget.getAttribute('href');\n                        log(href);\n                        Actions.onClickLink(href);\n                    };\n                    var links = document.getElementsByTagName('a');\n                    for (var i = 0; i < links.length; i++) {\n                        var link = links[i];\n                        link.style.color = linkColor;\n                        link.onclick = onClick;\n                    }\n                },\n                setSelectionColor: function (opt_color) {\n                    if (opt_color) {\n                        textareaEditor.style.caretColor = opt_color;\n                        contentEditor.style.caretColor = opt_color;\n                    }\n                },\n                setDisabled: function (disabled) {\n                    contentEditor.contentEditable = !disabled;\n                    textareaEditor.disabled = disabled;\n                    if (disabled) {\n                        document.body.classList.add('disabled-select');\n                    } else {\n                        document.body.classList.remove('disabled-select');\n                    }\n                },\n                setAutoFocus: function (autoFocus) {\n                    contentEditor.autofocus = autoFocus;\n                    if (autoFocus) {\n                        contentEditor.focus();\n                    }\n                },\n                undo: function () {\n                    exec('undo');\n                },\n                redo: function () {\n                    exec('redo');\n                },\n                bold: function () {\n                    exec('bold');\n                },\n                italic: function () {\n                    exec('italic');\n                },\n                underline: function () {\n                    exec('underline');\n                },\n                orderedList: function () {\n                    exec('insertOrderedList');\n                },\n                unorderedList: function () {\n                    exec('insertUnorderedList');\n                },\n                clear: function () {\n                    exec('removeFormat');\n                },\n                code: function () {\n                    isCode = !isCode;\n                    if (isCode) {\n                        contentEditor.style.display = 'none';\n                        textareaEditor.style.display = 'block';\n                    } else {\n                        contentEditor.style.display = 'block';\n                        textareaEditor.style.display = 'none';\n                    }\n                    Actions.changeHeight();\n                }\n            };\n\n            var init = function (element) {\n                var textarea = document.createElement('textarea');\n                textarea.className = 'textarea-editor';\n                textarea.addEventListener('input', () => {\n                    content.innerHTML = textarea.value;\n                }, false);\n                textarea.addEventListener('focus', () => {\n                    Actions.focus();\n                }, false);\n                textarea.addEventListener('blur', () => {\n                    Actions.blur();\n                }, false);\n                element.appendChild(textarea);\n\n                var content = document.createElement('div');\n                content.contentEditable = true;\n                content.spellcheck = false;\n                content.autocapitalize = 'off';\n                content.autocorrect = 'off';\n                content.autocomplete = 'off';\n                content.className = 'content-editor';\n                content.addEventListener('input', () => {\n                    textarea.value = content.innerHTML;\n                    Actions.changeHtml();\n                    Actions.changeHeight();\n                }, false);\n                content.addEventListener('focus', () => {\n                    Actions.focus();\n                }, false);\n                content.addEventListener('blur', () => {\n                    Actions.blur();\n                }, false);\n                element.appendChild(content);\n\n                exec('defaultParagraphSeparator', 'p');\n\n                var onMessage = function (event) {\n                    var message = JSON.parse(event.data);\n                    var action = Actions[message.type];\n                    log(message);\n                    if (action) {\n                        action(message.data);\n                    }\n                };\n\n                window.addEventListener('message', onMessage, false);\n                document.addEventListener('message', onMessage, false);\n                document.addEventListener('touchend', function () {\n                    content.focus();\n                });\n\n                return [content, textarea];\n            };\n\n            var [contentEditorNode, textareaEditorNode] = init(document.getElementsByClassName('editors')[0]);\n            contentEditor = contentEditorNode;\n            textareaEditor = textareaEditorNode;\n\n            Actions.code();\n            Actions.changeHeight();\n            log('initialized');\n            if (!isWebView) {\n                Actions.setColor('grey');\n                Actions.setFontSize('20');\n                Actions.setFontFamily('Roboto');\n                Actions.setLinkColor('green');\n\n                var sampleHtml = '<p><i><u>Underline italic text</u></i> <b>bold word</b> normal text with some characters <i>Italic word</i> another normal text <u>underline word</u> and email link <a href=\"mailto:siposdani87@gmail.com\">mailto</a> and standar link <a href=\"https://google.com\" target=\"_blank\"><b>link to website</b></a> and link to <a href=\"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\" target=\"_blank\">download file</a>.</p>';\n                Actions.setHtml(sampleHtml);\n            }\n        })();\n    </script>\n</body>\n\n</html>";
export default HTML;
